on:
  push:
  pull_request:
permissions:
    actions: none
    attestations: none
    checks: none
    contents: none
    deployments: none
    discussions: none
    id-token: none
    issues: none
    models: none
    packages: none
    pages: none
    pull-requests: none
    repository-projects: none
    security-events: none
    statuses: none

env:
    SRC_DIR: ./src
    
jobs:
  penultimate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      python-packages: ${{ steps.find-python-packages.outputs.packages}}
      node-packages: ${{ steps.find-node-packages.outputs.packages }}
      container-projects: ${{ steps.find-container-projects.outputs.images }}
      all-modified-directories: ${{ steps.modified-directories.outputs.all_modified_files }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          lfs: true
          fetch-depth: 2
          submodules: true
          persist-credentials: false
      - name: List files
        id: list-files
        run: |
          echo "::group::Files"
          find . -type f -print0 | xargs -0 ls -l
          echo "::endgroup::"
      - name: Find Python packages
        id: find-python-packages
        if: hashFiles(format('{0}/**/pyproject.toml', env.SRC_DIR))
        working-directory: ${{ env.SRC_DIR }}
        run: |
          PACKAGES=$(find . -name pyproject.toml -exec dirname {} \; | sed 's/^\.\///' | jq -R -s -c 'split("\n")[:-1]')
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
      - name: Find Node packages
        id: find-node-packages
        if: hashFiles(format('{0}/**/package.json', env.SRC_DIR))
        working-directory: ${{ env.SRC_DIR }}
        run: |
          PACKAGES=$(find . -name package.json -exec dirname {} \; | sed 's/^\.\///' | jq -R -s -c 'split("\n")[:-1]')
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT      
      - name: Find Container Projects
        id: find-container-projects
        if: hashFiles(format('{0}/**/Dockerfile', env.SRC_DIR))
        working-directory: ${{ env.SRC_DIR }}
        run: |
          IMAGES=$(find . -name Dockerfile -exec dirname {} \; | sed 's/^\.\///' | jq -R -s -c 'split("\n")[:-1]')
          echo "images=$IMAGES" >> $GITHUB_OUTPUT      
      - name: Find Modified Directories
        id: modified-directories
        if: hashFiles(format('{0}', env.SRC_DIR))
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
        with:
          path: ${{ env.SRC_DIR }}
          dir_names: true
          dir_names_max_depth: 1
          json: true
          escape_json: true
          matrix: true
      - name: Debug
        id: debug
        run: |
          echo "Debugging Outputs"
          echo "::group::Python Packages"
          echo "${{ steps.find-python-packages.outputs.packages }}"
          echo "::endgroup::"
          echo "::group::Node Packages"
          echo "${{ steps.find-node-packages.outputs.packages }}"
          echo "::endgroup::"
          echo "::group::Container Projects"
          echo "${{ steps.find-container-projects.outputs.images }}"
          echo "::endgroup::"
          echo "::group::Modified Directories"
          echo "${{ steps.modified-directories.outputs.all_modified_files }}"
          echo "::endgroup::"

  omega:
    needs: [penultimate]
    if: ${{ needs.penultimate.outputs.all-modified-directories != '[]' && needs.penultimate.outputs.all-modified-directories != '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          lfs: true
          submodules: true
          persist-credentials: false
      - name: Docker
        id: exists-dockerfile
        env:
          GH_TOKEN: ${{github.token }}
          # GH_TOKEN: ${{ secrets.SECONDARY_GITHUB_TOKEN }}
        if: hashFiles(format('{0}/{1}/Dockerfile', env.SRC_DIR, matrix.all-modified-directories))
        run: |
          echo "::group::Dockerfile"
          cat "${{ format('{0}/{1}/Dockerfile', env.SRC_DIR, matrix.all-modified-directories) }}"
          echo "::endgroup::"
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -f ref=${{ github.ref }} \
            -f inputs[source-directory]=${{ env.SRC_DIR }} \
            -f inputs[image-name]=${{ matrix.all-modified-directories }} \
            /repos/${{ github.repository }}/actions/workflows/docker.yml/dispatches
      - name: Python
        id: exists-python
        if: hashFiles(format('{0}/{1}/pyproject.toml', env.SRC_DIR, matrix.all-modified-directories))
        run: |
          echo "::group::pyproject.toml"
          cat "${{ format('{0}/{1}/pyproject.toml', env.SRC_DIR, matrix.all-modified-directories) }}"
          echo "::endgroup::"
      - name: Node
        id: exists-node
        if: hashFiles(format('{0}/{1}/package.json', env.SRC_DIR, matrix.all-modified-directories))
        run: |
          echo "::group::package.json"
          cat "${{ format('{0}/{1}/package.json', env.SRC_DIR, matrix.all-modified-directories) }}"
          echo "::endgroup::"
    strategy:
      fail-fast: false
      matrix:
        all-modified-directories: ${{ fromJson(needs.penultimate.outputs.all-modified-directories) }}
