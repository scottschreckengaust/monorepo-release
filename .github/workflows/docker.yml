on:
  workflow_dispatch:
    inputs:
      source-directory:
        description: 'The working directory to run the workflow in'
        required: true
        type: string
      image-name:
        description: 'The working directory to run the workflow in'
        required: true
        type: string
permissions:
    actions: none
    attestations: none
    checks: none
    contents: none
    deployments: none
    discussions: none
    id-token: none
    issues: none
    models: none
    packages: none
    pages: none
    pull-requests: none
    repository-projects: none
    security-events: none
    statuses: none
    
jobs:
  build:
    name: build ${{ inputs.image-name }} (${{ matrix.platform }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          lfs: true
          submodules: true
          persist-credentials: false
      # - name: Check for a Dockerfile
      #   if: ! ${{ hashFiles(format('{0}/Dockerfile', inputs.image-name)) }}
      #   run: |
      #     echo "::warning::No Dockerfile found in ${{ inputs.image-name }}. Failing build."
      #     exit 1
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ inputs.image-name }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
        with:
          buildkitd-flags: --debug
      - name: Build and push by digest
        id: build
        if: hashFiles(format('{0}/{1}/Dockerfile', inputs.source-directory, inputs.image-name))
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ inputs.image-name }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ${{ inputs.source-directory }}/${{ inputs.image-name }}
          file: ${{ inputs.source-directory }}/${{ inputs.image-name }}/Dockerfile
          outputs: type=image,push-by-digest=true,name-canonical=true
      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1
    strategy:
      fail-fast: false
      matrix:
        platform: [ 'linux/amd64', 'linux/arm64' ]


#   merge:
#     runs-on: ubuntu-latest
#     needs:
#       - build
#     steps:
#       - name: Download digests
#         uses: actions/download-artifact@v4
#         with:
#           path: ${{ runner.temp }}/digests
#           pattern: digests-*
#           merge-multiple: true
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#       - name: Docker meta
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ inputs.working-directory }}
#           tags: |
#             type=ref,event=branch
#             type=ref,event=pr
#             type=semver,pattern={{version}}
#             type=semver,pattern={{major}}.{{minor}}

#       - name: Create manifest list and push
#         working-directory: ${{ runner.temp }}/digests
#         run: |
#           docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
#             $(printf '${{ inputs.working-directory }}@sha256:%s ' *)
#       - name: Inspect image
#         run: |
#           docker buildx imagetools inspect ${{ inputs.working-directory }}:${{ steps.meta.outputs.version }}